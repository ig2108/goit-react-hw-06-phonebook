{"version":3,"sources":["transitions/slideTransition.module.css","components/App/App.module.css","components/ContactsList/ContactsList.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","transitions/slideTitle.module.css","components/ContactForm/ContactForm.module.css","redux/actionTypes.jsx","redux/contactForm/сontactFormReducer.jsx","redux/filter/filterReducer.jsx","redux/store.jsx","redux/selectors.jsx","components/ContactForm/ContactForm.jsx","redux/contactForm/contactActions.jsx","components/Filter/Filter.jsx","redux/filter/filterActions.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/ContactsList/ContactListWrap.jsx","components/App/App.jsx","index.js"],"names":["module","exports","Type","ADD_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","GET_CONTACTS_FROM_LS","INITIAL_STATE","id","name","number","addContactReducer","state","type","payload","filter","contact","savedContacts","filterReducer","rootReducer","combineReducers","contacts","сontactFormReducer","store","createStore","devToolsEnhancer","selectContacts","selectFilter","ContactForm","nameInputId","shortid","generate","numberInputId","handleChange","e","target","value","setState","checkIsInputCorrect","isNumber","Boolean","Number","onAddContact","props","NotificationManager","error","handleSubmit","preventDefault","find","item","toLowerCase","reset","this","className","styles","form","onSubmit","labelItem","htmlFor","textName","inputName","onChange","submitBtn","Component","connect","dispatch","contactActions","filterValue","onChangeFilter","filterActions","length","CSSTransition","in","timeout","classNames","slideTransition","unmountOnExit","filterInput","placeholder","ContactItem","onDeleteContact","contactInfo","onClick","deleteBtn","ContactsList","TransitionGroup","component","contactList","map","key","contactItem","includes","App","onGetFromLS","contactsFromLS","localStorage","getItem","JSON","parse","prevState","setItem","stringify","container","slideTitleTransition","appear","sectionTitle","propTypes","PropTypes","arrayOf","shape","string","isRequired","func","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a9ad3fe2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideTransition_enter__3nsYF\",\"enterActive\":\"slideTransition_enterActive__2gMI8\",\"exit\":\"slideTransition_exit__3I3Qt\",\"exitActive\":\"slideTransition_exitActive__3NEmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1K_KN\",\"sectionTitle\":\"App_sectionTitle__2FkGr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactsList_contactList__1-sz4\",\"contactItem\":\"ContactsList_contactItem__1jlo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactInfo\":\"ContactItem_contactInfo__1FuqD\",\"deleteBtn\":\"ContactItem_deleteBtn__1VJcZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__H-jH8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"slideTitle_appear__1yIMV\",\"appearActive\":\"slideTitle_appearActive__3TuxU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__-XJ2k\",\"labelItem\":\"ContactForm_labelItem__3K-Zc\",\"textName\":\"ContactForm_textName__fU-z7\",\"submitBtn\":\"ContactForm_submitBtn__1164r\"};","const Type = {\r\n  ADD_CONTACT: 'ADD_CONTACT',\r\n  DELETE_CONTACT: 'DELETE_CONTACT',\r\n  FILTER_CONTACTS: 'FILTER_CONTACTS',\r\n  GET_CONTACTS_FROM_LS: 'GET_CONTACTS_FROM_LS',\r\n};\r\n\r\nexport default Type;\r\n","import Type from '../actionTypes';\r\n\r\nconst INITIAL_STATE = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst addContactReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case Type.ADD_CONTACT:\r\n      return [...state, payload];\r\n    case Type.DELETE_CONTACT:\r\n      return state.filter(contact => contact.id !== payload.id);\r\n    case Type.GET_CONTACTS_FROM_LS:\r\n      return payload.savedContacts;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default addContactReducer;\r\n","import Type from '../actionTypes';\r\n\r\nconst filterReducer = (filter = '', { type, payload }) => {\r\n  switch (type) {\r\n    case Type.FILTER_CONTACTS:\r\n      return payload.filter;\r\n    default:\r\n      return filter;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","import { createStore, combineReducers } from 'redux';\r\n// import { configureStore } from '@reduxjs/toolkit';\r\nimport сontactFormReducer from './contactForm/сontactFormReducer';\r\nimport filterReducer from './filter/filterReducer';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: сontactFormReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, devToolsEnhancer());\r\n\r\nexport default store;\r\n","export const selectContacts = state => state.contacts;\r\nexport const selectFilter = state => state.filter;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contactForm/contactActions';\r\nimport { selectContacts } from '../../redux/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport styles from './ContactForm.module.css';\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  checkIsInputCorrect = (name, number) => {\r\n    const isNumber = Boolean(Number(number));\r\n    const { onAddContact } = this.props;\r\n    if (isNumber && name !== '') {\r\n      onAddContact({ ...this.state });\r\n    } else if (!isNumber && name === '') {\r\n      NotificationManager.error(\r\n        'Please, enter name or number',\r\n        `Some registration point are empty`,\r\n        5000,\r\n      );\r\n    } else if (!isNumber) {\r\n      NotificationManager.error(\r\n        'Please, enter a correct number',\r\n        'Number is not valid',\r\n        5000,\r\n      );\r\n    } else if (name === '') {\r\n      NotificationManager.error('Please, enter a name', 'Name is empty', 5000);\r\n    }\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { contacts } = this.props;\r\n    const { name, number } = this.state;\r\n    if (contacts.find(item => item.name.toLowerCase() === name.toLowerCase())) {\r\n      NotificationManager.error(\r\n        'Please, enter another name',\r\n        `${name} is already in contacts`,\r\n        5000,\r\n      );\r\n    } else {\r\n      this.checkIsInputCorrect(name, number);\r\n    }\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <NotificationContainer />\r\n        <form className={styles.form} onSubmit={this.handleSubmit}>\r\n          <label className={styles.labelItem} htmlFor={this.nameInputId}>\r\n            <p className={styles.textName}>Name</p>\r\n            <input\r\n              className={styles.inputName}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n            />\r\n          </label>\r\n          <label className={styles.labelItem} htmlFor={this.numberInputId}>\r\n            <p className={styles.textName}>Number</p>\r\n            <input\r\n              type=\"phone\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              id={this.numberInputId}\r\n            />\r\n          </label>\r\n          <button className={styles.submitBtn} type=\"submit\">\r\n            Add Contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mSTP = state => {\r\n  return {\r\n    contacts: selectContacts(state),\r\n  };\r\n};\r\n\r\nconst mDTP = dispatch => {\r\n  return {\r\n    onAddContact: ({ name, number }) =>\r\n      dispatch(contactActions.addContactAction({ name, number })),\r\n  };\r\n};\r\n\r\nexport default connect(mSTP, mDTP)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onAddContact: PropTypes.func.isRequired,\r\n};\r\n","import Type from '../actionTypes';\r\nimport shortid from 'shortid';\r\n\r\nexport const addContactAction = ({ name, number }) => ({\r\n  type: Type.ADD_CONTACT,\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nexport const deleteContactAction = id => ({\r\n  type: Type.DELETE_CONTACT,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\nexport const getContactsFromLS = savedContacts => ({\r\n  type: Type.GET_CONTACTS_FROM_LS,\r\n  payload: {\r\n    savedContacts,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport * as filterActions from '../../redux/filter/filterActions';\r\nimport { selectContacts, selectFilter } from '../../redux/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport slideTransition from '../../transitions/slideTransition.module.css';\r\n\r\nconst Filter = ({ contacts, filterValue = '', onChangeFilter }) => {\r\n  const handleChangeFilter = e => {\r\n    const { value } = e.target;\r\n    onChangeFilter(value);\r\n  };\r\n  return (\r\n    contacts.length > 1 && (\r\n      <CSSTransition\r\n        in={contacts.length > 1}\r\n        timeout={250}\r\n        classNames={slideTransition}\r\n        unmountOnExit\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={filterValue}\r\n          onChange={handleChangeFilter}\r\n          className={styles.filterInput}\r\n          placeholder=\"Type name to filter contacts...\"\r\n        ></input>\r\n      </CSSTransition>\r\n    )\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  value: PropTypes.string,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mSTP = state => {\r\n  return {\r\n    contacts: selectContacts(state),\r\n    filterValue: selectFilter(state),\r\n  };\r\n};\r\n\r\nconst mDTP = dispatch => {\r\n  return {\r\n    onChangeFilter: value => dispatch(filterActions.filterContacts(value)),\r\n  };\r\n};\r\n\r\nexport default connect(mSTP, mDTP)(Filter);\r\n","import Type from '../actionTypes';\r\n\r\nexport const filterContacts = value => {\r\n  return {\r\n    type: Type.FILTER_CONTACTS,\r\n    payload: {\r\n      filter: value,\r\n    },\r\n  };\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ contact, onDeleteContact }) => {\r\n  const { name, number } = contact;\r\n\r\n  return (\r\n    <>\r\n      <p className={styles.contactInfo}>\r\n        {name} : {number}\r\n      </p>\r\n      <button\r\n        onClick={() => onDeleteContact(contact.id)}\r\n        className={styles.deleteBtn}\r\n        type=\"button\"\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n  }),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport styles from './ContactsList.module.css';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\nimport slideTransition from '../../transitions/slideTransition.module.css';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.contactList}>\r\n      {contacts.map(contact => (\r\n        <CSSTransition\r\n          key={contact.id}\r\n          timeout={250}\r\n          classNames={slideTransition}\r\n          unmountOnExit\r\n        >\r\n          <li className={styles.contactItem}>\r\n            <ContactItem contact={contact} onDeleteContact={onDeleteContact} />\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contactForm/contactActions';\r\nimport { selectContacts, selectFilter } from '../../redux/selectors';\r\nimport ContactsList from './ContactsList';\r\n\r\nconst mSTP = state => {\r\n  return {\r\n    contacts: selectContacts(state).filter(contact =>\r\n      contact.name.toLowerCase().includes(selectFilter(state).toLowerCase()),\r\n    ),\r\n    filter: selectFilter(state),\r\n  };\r\n};\r\n\r\nconst mDTP = dispatch => {\r\n  return {\r\n    onDeleteContact: id => dispatch(contactActions.deleteContactAction(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mSTP, mDTP)(ContactsList);\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contactForm/contactActions';\r\nimport { selectContacts } from '../../redux/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport Filter from '../Filter/Filter';\r\nimport ContactsList from '../ContactsList/ContactListWrap';\r\nimport styles from './App.module.css';\r\nimport slideTitleTransition from '../../transitions/slideTitle.module.css';\r\n\r\nclass App extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    const { onGetFromLS } = this.props;\r\n    const contactsFromLS = localStorage.getItem('contacts');\r\n    if (contactsFromLS) {\r\n      onGetFromLS(JSON.parse(contactsFromLS));\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const { contacts } = this.props;\r\n    if (prevState.contacts !== contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <CSSTransition\r\n          in\r\n          timeout={500}\r\n          classNames={slideTitleTransition}\r\n          appear\r\n        >\r\n          <h2 className={styles.sectionTitle}>Phonebook</h2>\r\n        </CSSTransition>\r\n        <ContactForm />\r\n        <h2 className={styles.sectionTitle}>Contacts</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mSTP = state => {\r\n  return {\r\n    contacts: selectContacts(state),\r\n  };\r\n};\r\n\r\nconst mDTP = dispatch => {\r\n  return {\r\n    onGetFromLS: savedContacts => {\r\n      dispatch(contactActions.getContactsFromLS(savedContacts));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mSTP, mDTP)(App);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onGetFromLS: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}